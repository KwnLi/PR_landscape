---
title: "Landscape buffers"
author: "Kevin Li"
date: "10/23/2021"
output: html_document
---

## Landscape buffer analysis

This session is to introduce loading raster data to R and performing a simple analysis on it. We will use `sf`, a package for handling geographic data, `terra`, a package for handling raster data, and the `tidyverse` package, which includes `ggplot` and other useful functions. `ggplot` includes functions for plotting georeferenced vector data (points, polygons, and lines), but not raster data. For this we use `ggspatial` and `rasterVis`.

```{r load_packages, message = FALSE}
library(sf)
library(terra)
library(tidyverse)
library(ggspatial)
library(ggsflabel)
library(rasterVis)
#library(landscapemetrics)
```

## Farm points

We load the point locations of the 25 farms + Casa Pueblo from the geographic coordinates. Geographic coordinates are based on their angle from the equator and prime meridian on a globe. These coordinates can be used to create a geographically-reference sf object using the `sf` package. By default, the function we are using, `st_as_sf` assumes we are using the WGS84 geographic coordinate system when we provide coordinates. We can define this explicitly (as shown in the code) by defining the `crs` argument. In the code, we use the function `st_crs()` to retrieve the WGS84 definition by providing the code `4326`. In this case, this wasn't actually necessary because the `st_as_sf` automatically assumes the WGS84 coordinate system by default since it is very commonly used. But in certain cases this needs to be defined. You can get this code and other from the website https://epsg.io/ .

We plot the points using `ggplot` package and the `geom_sf()` function. We add text labels with the function `geom_sf_text_repel()` (from the `ggsflabel` package), which automatically "repels" the text away from the point and each other, so it looks better. We add a background layer with `annotation_map_tile()` from the `ggspatial()` package.

```{r farm_points, message=FALSE}
farms <- read.csv("./Data/PR_farms26.csv")

head(farms)

farms.sf <- st_as_sf(farms,
                     coords = c(5, 4),     # give the column numbers where the x (longitude) and y (latitude) coordinates are located
                     crs = st_crs(4326))   # define the coordinate system. st_crs() is a function to retrieve the coordinate system by a code.

# plot the points
ggplot(farms.sf) + annotation_map_tile(zoomin = -1) + geom_sf() +
  geom_sf_text_repel(aes(label = PESTS_sitename), size = 3)
```

## Puerto Rico land cover data

We are going to use the National Vegetation Class map for Puerto Rico. This was recently completed for the 2016 land cover. It is available at: https://landfire.gov/insular_areas.php . It is found in the link in the table in the row for Puerto Rico, under the "LF 2016 Remap [LF 2.0.0]" column.

Entering the raster in the console returns some basic information about this layer, like its resolution (30m), extent, and coordinate reference system. Importantly in our case are the categories data, which shows the data that can be displayed in the raster.

```{r landfire}
lf <- rast("./Data/LF2016_NVC_200_PRVI/Tif/LV16_NVC_200.tif")

lf
plot(lf)
```

### Active category

By default when we plot the raster it will show the first category, which is "Count", i.e. the number of cells in a class. This isn't very useful, so we can switch the "active" category to `GROUP` by defining it with the `activeCat()` function.

```{r switch_activeCat}
activeCat(lf) # by default `1` 

activeCat(lf) <- "GROUP"

activeCat(lf) # now it's `17`, which is the location of "GROUP" in the order of columns

plot(lf)  # now more useful categories are shown
```

## Extracting land cover areas in a buffer around each point

The package `terra` has functions to create buffers around points and extract land cover from a raster within those buffers.

```{r extract_buffer}
farms.vect <- vect(farms.sf) # convert the points to vect format

farms.pr <- project(farms.vect, "epsg:6566") # project the points to a PR projection
lf.pr <- project(lf, "epsg:6566") # project the land fire layer to the same PR projection

farms500 <- buffer(farms.pr, width = 500) # buffer by 500 m

lf500 <- terra::extract(lf.pr, farms500, list = TRUE, touches = TRUE) %>% lapply(table) %>% bind_rows()

```